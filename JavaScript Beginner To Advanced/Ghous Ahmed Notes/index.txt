Programming ek tarika hai jisse hum computer ko instructions dena seekhte hain. Ye instructions humare likhe gaye special codes hote hain jo computer ko samajhne me madad karte hain. Programming ke zariye hum computer programs, applications, websites, games, aur aur bhi bahut kuch develop kar sakte hain. Ye ek creative aur powerful tool hai jo technology ko shape dene me madad karta hai. Programming me alag-alag programming languages ka istemal hota hai jaise ki Python, Java, C++, JavaScript, etc.

Lekin Computer to Programming Samajhta nhi he

Haan, aap bilkul sahi hain. Computer keval binary language (0s aur 1s) ko samajh sakta hai, jo ki machine language ke roop mein jaana jaata hai. Lekin hum insani zubaan mein likhe gaye code ko compile ya interpret karke machine language mein badal dete hain, taaki computer usse samajh sake.

Programming languages ko hum insani zubaan mein likhte hain taaki hum computer ko instructions de sakein. Ye languages humare liye zyada samajhne mein asaan hote hain. Jab hum code likhte hain, hum instructions ko syntax ke roop mein likhte hain jo computer ke rules aur structure ko follow karte hain.

Is tarah se, programming ek tarika hai jisse hum computer ko samajhane ke liye insani zubaan mein instructions dete hain. Computer phir un instructions ko machine language mein badal kar samajhta hai aur unhe execute karta hai.

Ab Jo Translate krta he wo 2 tareeqe hote he compile krne ke.

Compiler aur interpreter dono hi programming languages ke code ko machine language mein translate karne ke liye istemal hota hai, lekin dono kaam karne ka tarika alag hai.

1. compiler

Compiler ek aise program hai jo poora source code ko ek baar mein translate karta hai. Source code compile hota hai aur uska machine language version, ya object code, generate hota hai. Is object code ko execute kiya ja sakta hai baar-baar bina source code ke. Compiler ek complete executable file generate karta hai, jo alag se execute kiya ja sakta hai.

2. interpret

Interpreter bhi source code ko machine language mein translate karta hai, lekin wo ise line-by-line execute karta hai. Interpreter source code ko ek line ko parhta hai, usse translate karta hai aur phir use execute karta hai. Phir agle line ko padhta hai aur usi tarah se continue karta hai. Interpreter source code ko execute karte waqt hota hai, isliye har baar code ko run karne ke liye interpreter ki zarurat hoti hai.

Toh, ek compiler poora source code ko ek baar mein translate karta hai aur ek executable file generate karta hai, jabki ek interpreter source code ko line-by-line translate aur execute karta hai.

--------------------------------------------------------------------

High Level Programming language VS Low Level Programming language

High Level Programming language

High level languages insani zubaan jaise English ki tarah hoti hain, jinhe aasani se samjha aur likha ja sakta hai.
Ye languages abstractions aur built-in functions ka istemal karte hain jo programming tasks ko asaan banate hain.
Developers ko hardware ki details ya internal workings ki fiqr nahi karni parti hai.
Examples: Python, Java, JavaScript, C#, etc.

Low Level Programming language

Low level languages hardware aur computer architecture ke niji tareeqo se zyada qareeb hoti hain.
In languages mein programming instructions aur data ko seedha hardware level par manipulate karne ki suvidha hoti hai.
Ye languages zyada samajhne mein mushkil hote hain aur development process ko complex bana dete hain.
Examples: Assembly language, Machine language.

JavaScript ek high level programming language hai. Iska matlab hai ki ye language insani zubaan jaise hai aur developers ise aasani se samajh aur likh sakte hain. JavaScript ko web development ke liye khas tor par istemal kiya jata hai, jaise ki web applications, interactive websites, aur browser extensions banane ke liye. JavaScript ka use client-side scripting aur server-side scripting mein bhi hota hai. Ye language modern web development ka ek important component hai.

--------------------------------------------------------------------

EcmaScript (ECMAScript) ek standard hai jo JavaScript programming language ke liye define ki gayi hai. Jab se JavaScript banaya gaya, tab se isme regular updates aur improvements hote rahe hain. In updates aur improvements ko standardize karne ke liye, Ecma International ne EkmaScript ko define kiya.

ECMAScript, JavaScript ki ek specific implementation ka standard hai. Ye standard specify karta hai ki JavaScript language mein kya features aur capabilities hone chahiye. Isse developers ko ek consistent platform milta hai jisme wo code likh sakte hain.

Har new version ya update ke saath, ECMAScript specification mein naye features aur improvements shamil kiye jate hain jo developers ke liye behtar functionality aur flexibility provide karte hain. Bahut se modern web browsers, jaise ki Google Chrome, Mozilla Firefox, aur Safari, ECMAScript ke latest versions ko support karte hain, jisse developers ko naye features ka istemal karne ki rasta milta hai.


--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

1st Chapter - Alert

JavaScript mein, `alert()` ek built-in function hai jo ek pop-up dialog box ko display karta hai jo user ko kuch message dikhata hai. Ye message typically ek string hota hai jo developer ne specify kiya hota hai. `alert()` function ka basic istemal user ko kisi information ya notification ke bare mein suchit karne ke liye hota hai.

Yeh ek simple tareeqa hai user ko kuch information provide karne ka. Jaise:

```javascript
alert("Welcome to our website!");
```

Is code se, agar koi user website ko visit karta hai to usse ek pop-up message milega jisme "Welcome to our website!" likha hoga. Uske baad jab user pop-up box ko close karega, wo website par navigate kar sakta hai.

ye javascript ka banaya gaya eik method he jise ham use krskte he.
Ab method ka matlab eil Example se samajhata hoo.
Ap ke Mom ne kaha ke motor chala ke ajaooo. lekin motor chalane ke liye motor set krni padti he phir uske taar ko board ke sath jora jataa he. phir jaake start krni padti he agar ham taar ko board ke sath jor dete he to ab hamara kaam chota saa reh gaya bas hame button toggled krna he motor ko chalane ya band krne ke liye. ab hamne toggled wala seen kiya ne ye eik method ban gaya or ham us ko use krte rehte he.

Rules Of method.
- method ke sath hamesha round bracket lagta he () agar iske saath round bracket () nhi lage to ham usko method nhi keh skte 

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Rule Of JavaScript
- Agar Ham ne Code Likha Or Code ka Output Show nhi horaha. to hame browser me inspect me jake console me check krenge
- saare errors browser me inspect me jake console me nazar ate he
- Agar Ham ne Boolean, Number, Null, undefined ya koi bhi datatype ko string me likh de to koi bhi error nhi ayega blki wo jo aapne likh tha uska datatype string banega. lekin agar ham string ko string ke ilawa koi or datatype me likh de to error asakta he.
- development ke doraan console khol ke rakhe to behter he.
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript aur dusri programming languages ke darmiyan kuch mukhya farq hote hain:

1. Client-side aur Server-side Execution:
   - JavaScript ek client-side scripting language hai, matlab ye web browsers mein execute hota hai.
   - Dusri taraf, server-side languages jaise PHP, Python, aur Ruby server par execute hote hain.

2. Type of Language:
   - JavaScript ek interpreted language hai, matlab iska code line-by-line execute hota hai.
   - Kuch dusri languages jaise Java, C++, aur C# compiled languages hain, jinke code ko pehle compile kiya jata hai aur phir execute kiya jata hai.

3. Syntax aur Structure:
   - JavaScript ka syntax aur structure alag hota hai dusri languages jaise C++, Java, Python, etc.
   - Isme specific syntax rules aur conventions hote hain jo dusri languages se alag hote hain.

4. Concurrency Handling:
   - JavaScript single-threaded language hai, matlab ek samay par sirf ek hi task execute hota hai.
   - Kuch languages concurrent programming aur multithreading ko support karte hain, jisse ek samay par multiple tasks ko handle kiya ja sakta hai.

5. Standard Libraries aur Frameworks:
   - JavaScript ke liye alag-alag standard libraries aur frameworks hote hain jaise ki React, Angular, aur Node.js.
   - Dusri languages ke liye bhi apne standard libraries aur frameworks hote hain jo unke specific use cases ko address karte hain.

6. Execution Environment:
   - JavaScript web browsers aur server environments jaise Node.js ke through execute hota hai.
   - Dusri languages apne specific runtime environments mein execute hote hain, jaise ki Java Virtual Machine (JVM) Java ke liye.

Ye kuch mukhya farq hain JavaScript aur dusri programming languages ke darmiyan. Har language ke apne use cases aur strengths hote hain, jisse developers apne project requirements ke according choose karte hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Console kya hota he aur as a developer ham kyu istemal krte he?

"Console" ek development environment ka hissa hota hai jo developers ko code likhte waqt debugging aur testing ke liye madad karta hai. Iska basic purpose hota hai developers ko real-time feedback provide karna unke code ke execution ke doraan.

Web development context mein, "console" usually web browser ke developer tools ka ek part hota hai. Developers isme JavaScript code likh sakte hain aur fir use execute karke errors ko identify aur debug kar sakte hain. Ye console aam tor par ek command line interface ki tarah kaam karta hai jahaan se developers apne JavaScript code ko run kar sakte hain.

Developers console ka istemal karte hain kyun ki:

1. Debugging: Developers console ko use karte hain errors aur bugs ko identify karne aur fix karne ke liye. Ye unhe real-time feedback deta hai unke code ke execution ke doraan.

2. Testing: Console ko use karke developers apne code ko test kar sakte hain. Wo apne functions aur variables ko test kar sakte hain aur unke output ko dekh sakte hain.

3. Logging Information: Developers apne code ke different parts ko console par log karte hain taki wo code ka flow track kar sakein aur kisi issue ko diagnose kar sakein.

4. Performance Analysis: Console ki madad se developers apne code ki performance analyze kar sakte hain, jaise ki execution time aur memory usage.

5. API Exploration: Console ki madad se developers web browser ke APIs ko explore kar sakte hain aur unka istemal karke dynamic web applications develop kar sakte hain.

Overall, console ek powerful tool hai jo developers ko code likhte waqt real-time feedback provide karta hai aur unhe debugging aur testing mein madad karta hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

method likhte waqt kuch mistakes or achi practices

Jab aap method likh rahe hain, kuch mistakes se bachne aur behtar practices ka dhyan rakhna jaruri hai. Niche kuch common mistakes aur achi practices di gayi hain:

Mistakes:

1. Poor Naming Convention:
   - Method ka naam clear aur descriptive hona chahiye.
   - Avoid single letter names ya ambiguous names ka istemal.

2. Overloading:
   - Method overloading (ek method ka multiple definitions dena) JavaScript mein nahi hota hai.
   - Ek hi naam ke do alag-alag functions define karne ki koshish na karein.

3. Overuse of Side Effects:
   - Methods ko likhte waqt side effects ko minimize karein.
   - Side effects se matlab hai ki function ke execution se kisi state ya variable mein unexpected changes ho jaayein.

4. Ignoring Error Handling:
   - Error handling ko ignore na karein. Methods ko robust banane ke liye error handling ka hona jaruri hai.
   - try-catch blocks ka istemal karein jahaan exception ki sambhavna ho.

Achi Practices:

1. Clear Purpose:
   - Har method ka ek clear purpose hona chahiye.
   - Method ka naam uske functionality ko describe karna chahiye.

2. Single Responsibility Principle (SRP):
   - Ek method ko ek specific task ya responsibility assign karein.
   - Methods ko modular banayein taki unka reuse aur maintenance aasan ho.

3. Parameter Handling:
   - Sahi number aur type ke parameters ka istemal karein.
   - Default parameters ka istemal karke flexible methods likhein.

4. Return Statements:
   - Method ke andar sahi tarah se return statements ka istemal karein.
   - Har function ko ek return value dena chahiye, agar applicable ho.

5. Comments aur Documentation:
   - Code readability aur maintainability ke liye comments ka istemal karein.
   - Complex logic ya important concepts ko explain karne ke liye documentation ka istemal karein.

6. Testing:
   - Har method ko test karein multiple scenarios ke liye.
   - Unit tests likh kar method ke expected behavior ko verify karein.

In practices ko follow karke aap apne methods ko efficient, readable, aur maintainable bana sakte hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

example mene alert ka eik method call kiya. lekin kaffii log window.alert likh te he aisa krna kaisa

`alert()` ek global function hai JavaScript mein, isliye aap ise directly `alert()` likhkar bhi call kar sakte hain. Iska matlab hai ki `window.alert()` aur `alert()` dono kaam karenge, kyun ki JavaScript mein global functions ko direct access kar sakte hain.

Kuch log `window.alert()` ka istemal karte hain taki clarity maintain ho aur pata chale ki ye ek global function hai jo window object ke andar hai. Ye coding conventions ya coding standards ke tahat kiya jaata hai, lekin technically dono hi tareeqe sahi hain.

Jaise ki:

```javascript
// Dono sahi tarah se kaam karenge
alert("Hello, world!");
window.alert("Hello, world!");
```

Aapko jo bhi approach comfortable aur consistent lage, aap uska istemal kar sakte hain. Important hai ki aap apne code mein consistency maintain karein taaki dusre developers ko aasani se samajh aaye.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Variable in JavaScript

Variable ek programming concept hai jise real-world analogy se samjha ja sakta hai. Ek variable ek container ki tarah hota hai jisme aap data store kar sakte hain aur phir us data ko program ke doosre hisson mein use kar sakte hain.

Ek real-life example ke roop mein sochiye ki aap ek dukaan chalate hain aur aapke paas ek cash counter hai jisme aap paise rakhte hain. Is cash counter ko ek variable ke roop mein samajh sakte hain. Jab bhi koi customer aata hai aur kuch khareedta hai, aap uske paise is cash counter mein rakhte hain aur phir un paison ko dusre transactions mein istemal karte hain.

varieble banane ka eik or faida ye he ke koi bhi aisa data jo hamari file me baaar baaar use ho raha he to ham uske variable k andar insert krke phir use krLegene

Variable banane ka tareeqa.
- sab se pehle keyword ata he varieble ka jiska naam he "var"
- then varieble ka naam ata he naam koi bhi ho sakta he lekin iske bhi kuch rules hotw he jo batata hoo

Variable ke naam likhte waqt kuch usool ya rules hote hain jo aapko programming mein follow karne chahiye:

1. Descriptive Names: Variable ke naam ko aise chune jo uski purpose ko clearly represent kare. Isse code ko padhne wale aur aap khud ko bhi samajhne mein madad milti hai.

2. CamelCase: Variable ke naam mein multiple words ka use hota hai to CamelCase ka istemal karein jisme har new word ke first letter ko capital likha jata hai. For example: `totalAmount`, `customerName`, etc.

3. Meaningful Names: Variable ka naam aisa hona chahiye jo uski value ya data ko samajhne mein madad kare. Avoid single letter names jaise `x`, `y`, `z` unless unka specific meaning hai.

4. Avoid Keywords: Variable ke naam mein programming language ke reserved keywords ka istemal na karein jaise `var`, `if`, `else` etc.

5. Consistency: Variable ke naming conventions ko consistent rakhein taaki code ki readability improve ho.

6. Use English: Variable names ko English mein likhein taaki code ko padhne wale har koi unhe aasani se samajh sake.

7. Avoid Numbers at Start: Variable ke naam ke shuru mein number ka istemal na karein, kyunki kuch programming languages mein ye allow nahi hota.

8. Avoid Special Characters: Variable names mein special characters jaise `@`, `$`, `!` ka istemal na karein, kyunki ye confusion create kar sakte hain aur readability ko kam kar sakte hain.

Yeh kuch common guidelines hain jo variable naming ke liye follow ki jaati hain. Inka istemal karke aap apne code ko zyada readable aur maintainable bana sakte hain.

- then = ka sign
- phir uske andar variable ka data/value
- & Last inverted coma ';' - ye zroori bhi nhi he but best practice he ke lagao to acha he

ham varieble ko update bhi krskte he. means
var isClassContinued = true
ab edit krne ke liye.
- pehle varieble ka naam
- phir equalsTo ka sign ( = )
- Phit updateed value
- & Last inverted coma ';' - ye zroori bhi nhi he but best practice he ke lagao to acha he


Agar Hamne Varieble Banaya Lekin Uske Andar koi bhi valyue add nhi ki to javascript use undefined show krwata he.


--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

alert(fullName)
mene fullName name ka koi bhi variable nhi banaya or usko mene alert krwadiya lekin bina string ke sath. ab mjhe error mils "fullName is not defined". usme fullName ko pehle browser ne search kiya ke ayaa ke is naam se koi variable bana he lekin nhi bana hua tha is liye mere paas error agayaa.

Agar me varieble bana doonga to ab us ko varieble mil jaye ga or wo value show kr dega

Agar me variable neeche banata hoo or variable banane se pehle hi me fullName ko alert krdeta hoo. is topic ko kehte he hoisting Ajaaoo detail me parhte he

--------------------------------------------------------------------

Hoisting ek JavaScript ka concept hai jisme variables aur functions ki declaration unke scope ke shuru mein move ki jaati hai. Lekin, assignment (ya initialization) statement wahi pe rehta hai jahan aapne likha hai.

Iska simple matlab hai ki JavaScript interpreter code ko padhte waqt sabhi variable aur function declarations ko us block ke shuru mein move kar deta hai, lekin unki assignment ko wahi pe rehne deta hai jahan aapne kiya hai.

example 

var myName = "Qitmeer" // JavaScript is varieble ko wahi top pe leke chala jata he. lekin iski value ko wahi pe rehne deta he means ke
var myName; // top pe leke chala jae ga
myName = "Qitmeer"; // wahi pe Rehegea

Chaliye ek simple example se samjhe:

```javascript
alert(x); // Output: undefined
var x = 5;
alert(x); // Output: 5
```

Yahan `alert(x)` pehle hi run hota hai, lekin `x` ka value `5` nahi hai, balki `undefined` hai. Kyunki `var x = 5;` ki declaration `alert(x);` ke upar hoist ho gayi hai, lekin assignment wahi pe rehta hai jahan aapne likha hai.

Is tarah se hoisting ko samajhna asaan hai. Hoisting ke through JavaScript interpreter code ko organize karta hai taaki aapko errors se bachane mein madad mile aur aapka code sahi tarah se execute ho sake.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript case-sensitive hai, matlab ki wo capital letters aur small letters ko alag alag samajhta hai. Yani agar aap kisi variable, function, ya kisi aur identifier ka naam capital letters ya small letters mein likhte hain, to JavaScript unhe alag alag entities ke roop mein treat karega.

Jaise ki:

```javascript
var myVariable = 10;
var myvariable = 20;

console.log(myVariable); // Output: 10
console.log(myvariable); // Output: 20
```

Yahan, `myVariable` aur `myvariable` do alag alag variables hain, kyunki capitalization mein difference hai.

Isi tarah se function names, object properties, aur other identifiers bhi case-sensitive hote hain. Yadi aap kisi identifier ko ek jagah capital letter ke sath aur dusri jagah small letter ke sath use karte hain, to JavaScript unhe alag alag samajhega.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein variable ke naam rakhne ke kuch rules hain, jinhe aapko follow karna chahiye:

1. Valid Characters: Variable names letters (A-Z, a-z), digits (0-9), underscore (_) aur dollar sign ($) ka combination ho sakta hai. Lekin, variable ka naam aise shuru nahi ho sakta jo number se start ho.

2. Case-Sensitivity: JavaScript case-sensitive hai, matlab ki uppercase aur lowercase letters alag alag consider hote hain. `myVariable`, `MyVariable`, aur `myvariable` teen alag alag variables hain.

3. Reserved Keywords: JavaScript mein kuch reserved keywords hote hain jaise `var`, `let`, `const`, `function` etc. In keywords ka istemal variable names ke roop mein nahi kiya ja sakta.

4. Meaningful Names: Variable names ko descriptive aur meaningful rakhein taaki dusre developers aasani se samajh sakein ki variable ka use kya hai. For example, `count` ka istemal count karne ke liye karein.

5. CamelCase Convention: Variable names mein CamelCase convention ka istemal kiya jata hai jisme har new word ke first letter ko capital likha jata hai, jaise `myVariableName`.

6. Avoid Numbers at Start: Variable name ke shuru mein number ka istemal na karein. Number se start hone wale names invalid hote hain.

7. Avoid Special Characters: Variable names mein special characters jaise `!`, `@`, `#`, `%`, etc. ka istemal na karein. Underscore (_) aur dollar sign ($) ka use kiya ja sakta hai lekin zyadatar developers prefer karte hain ke sirf underscore ka hi istemal kiya jaye.

8. Use English: JavaScript mein variable names ko English mein likha jata hai.

Yeh kuch common rules hain variable names ke liye jo JavaScript mein follow kiye jaate hain. In rules ka palan karke aap apne code ko zyada readable aur maintainable bana sakte hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

CamelCase aur SnakeCase do alag-alag naming conventions hain jo programming languages mein variable names, function names, aur identifiers ke liye istemal kiye jaate hain. In dono conventions ka istemal code ko organized aur readable banane mein madad karta hai.

1. CamelCase:
   - CamelCase naming convention mein har new word ke pehle letter ko capital likha jaata hai, starting ke word ke first letter small hota hai.
   - Example: `myVariableName`, `calculateInterestRate`, `getUserDetails`.
   - JavaScript, Java, C#, Swift jaise languages mein CamelCase convention commonly istemal hota hai.
   - CamelCase ka istemal karne se code ki readability improve hoti hai aur identifiers ko clearly distinguish karne mein madad milti hai.

2. SnakeCase:
   - SnakeCase naming convention mein words ko underscore (_) se separate kiya jata hai aur sabhi letters small hoti hain.
   - Example: `my_variable_name`, `calculate_interest_rate`, `get_user_details`.
   - Python, Ruby jaise languages mein SnakeCase convention prefer kiya jata hai.
   - SnakeCase ka istemal bhi readability ko improve karta hai, especially agar variable name mein multiple words hain to unko clearly separate karne mein madad milti hai.

Importance:
- Sahi naming convention ka istemal code ko padhne wale aur maintain karne wale developers ke liye bahut mahatvapurna hai. Ye unhe code ko samajhne mein madad karta hai.
- CamelCase aur SnakeCase jaise conventions ka istemal karke aap apne code ko consistent aur organized rakh sakte hain, jisse dusre developers ko code samajhne mein asani hoti hai.
- Companies aur projects ke andar common naming conventions follow kiye jaate hain taaki codebase ek jaisa dikhe aur maintain karne mein asani ho.

Samanya roop se, CamelCase JavaScript jaise languages mein zyada popular hai, lekin kuch specific communities ya languages jaise Python mein SnakeCase zyada prefer kiya jata hai. Isme koi 'right' ya 'wrong' convention nahi hoti, balki consistency aur readability hi sabse mahatvapurna hoti hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Variable For Numbers

is me saari cheeze wohi he bus ye batana chah raha he ke ham variable me number bhi store krwaskte he.
example
var num = 100;
ab is ki value ke sath string yaani "" inverted comas nhi lagenge kyu ke is ki datatype number he. "" inverted coma sirf string ke sath lagye he

Ab is Number ki datatype ke sath ham mathamatical operators bhi kr skte he

```javascript
// Variable 'num1' ko 5 ke saath initialize kiya gaya hai
var num1 = 5;

// Variable 'num2' ko 3 ke saath initialize kiya gaya hai
var num2 = 3;

// 'num1' aur 'num2' ko add karke 'result' variable mein store kiya gaya hai
var result = num1 + num2;

// 'result' ko console par print kiya gaya hai
console.log("Addition: " + result);

// 'num1' aur 'num2' ko multiply karke 'result' variable mein store kiya gaya hai
result = num1 * num2;

// 'result' ko console par print kiya gaya hai
console.log("Multiplication: " + result);

// 'num1' se 'num2' ko divide karke 'result' variable mein store kiya gaya hai
result = num1 / num2;

// 'result' ko console par print kiya gaya hai
console.log("Division: " + result);

// 'num1' se 'num2' ko subtract karke 'result' variable mein store kiya gaya hai
result = num1 - num2;

// 'result' ko console par print kiya gaya hai
console.log("Subtraction: " + result);
```

Iss code mein, `num1` aur `num2` variables ko 5 aur 3 ke saath initialize kiya gaya hai. Fir, yeh variables ko alag-alag mathematical operations jaise addition, multiplication, division, aur subtraction mein use kiya gaya hai. Sabhi operations ke results ko `result` variable mein store kiya gaya hai aur fir console par print kiya gaya hai.

Output:
```
Addition: 8
Multiplication: 15
Division: 1.6666666666666667
Subtraction: 2
```

Yeh code JavaScript mein variables ka use karke mathematical operations ko demonstrate karta hai.

var num1 = 10;
var num2 = 30;

// console.log(num1)
// console.log(num2)
console.log(num1 + num2); // is me isne concat yaani plus krdiya is liye is ka output araha he 40.

// Ab Agar me subtract krta hoo.
console.log(num2 - num1); // ab isNe minus yaani subtract krdiya to iske answer aya tha // 20

// Ab Agar me multiply krta hoo.
console.log(num2 * num1); // ab isNe multiply krdiya to iske answer aya tha // 300

// Ab Agar me divide krta hoo.
console.log(num2 / num1); // ab isNe divide krdiya to iske answer aya tha // 3

var num1 = "10";
var num2 = 30;

// Ab Agar me eik number OR eik string ke sath mathamatical operator kroo to.Ab

// console.log(num1 + num2); // ab ye yaha pe plus to kr skta h. lekin mathamatical operation me sirf number ko hi plus krta he or yaha pe number nhi he isliye isne plus nhi concat krdiya

console.log(num2 - num1); // concat ka eik usool he agar sign plus ka Or Coma ka hua to sirf concat krega. agar sign is ke khilaf ho or bhale value string me hoto wo mathamatical operation perform krdeta he. agar string ke andar number hua to. agar string ke andar text hua to NaN (Not a Number)  return krdega 

// What is Concat?

// Concatenation ek programming term hai jo do strings ya do data sets ko ek saath jodne ka process hai. Jab aap do strings ko concatenate karte hain, to aap unhe ek saath jodkar ek naya string bana lete hain. Ismein kisi bhi data type ki values ho sakti hain, jaise strings, numbers, Arrays, ya objects.

// JavaScript mein, aap concatenation karne ke liye "+" operator ka istemal karte hain. Agar aap do strings ko "+" ke saath use karte hain, to wo concatenate ho jaati hain.

// Yahaan ek JavaScript example hai jo concatenate ko demonstrate karta hai:

// ```javascript
// var string1 = "Hello";
// var string2 = "World";

// // Concatenating strings using the + operator
// var concatenatedString = string1 + " " + string2;

// console.log(concatenatedString); // Output: Hello World
// ```

// Is example mein, `string1` mein "Hello" aur `string2` mein "World" hai. Fir, humne inhe concatenate karne ke liye "+" operator ka use kiya hai aur ek naya string banaya hai jo "Hello World" hai.

--------------------------------------------------------------------
--------------------------------------------------------------------

Agar JavaScript me Line Breake Krni Hoto He /n Lage ga

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein "increment" aur "decrement" ek adad (number) ko badhane ya ghatane ka amal hain. Ye amal unary operators hote hain, yaani ek single operand (ya value) ke saath kaam karte hain. Increment aur decrement ke do prakar hote hain: "pre-increment/decrement" aur "post-increment/decrement".

1. Pre-increment / Pre-decrement:
   - Pre-increment ka syntax hai: `++variable`
   - Pre-decrement ka syntax hai: `--variable`
   - Ismein, pehle hi variable ki value badhaya ya ghataya jata hai aur phir us updated value ko kisi variable mein store kiya jata hai.
   - Example:
     ```javascript
     let x = 5;
     let y = ++x; // x ko pehle badhaya gaya aur phir y mein store kiya gaya
     console.log(x); // Output: 6
     console.log(y); // Output: 6
     ```

2. Post-increment / Post-decrement:
   - Post-increment ka syntax hai: `variable++`
   - Post-decrement ka syntax hai: `variable--`
   - Ismein, variable ki value pehle kisi variable mein store ki jati hai aur phir variable ki value badhaya ya ghataya jata hai.
   - Example:
     ```javascript
     let a = 10;
     let b = a++; // a ki value ko pehle b mein store kiya gaya, phir a ko badhaya gaya
     console.log(a); // Output: 11
     console.log(b); // Output: 10
     ```

Yeh operators commonly loops aur variables mein value manipulation mein istemal kiye jate hain. Lekin, inka istemal zyada ho sakta hai to code ki readability aur maintainability par asar pad sakta hai, isliye inka istemal dhyan se karna chahiye.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein BODMAS (Brackets, Orders, Division and Multiplication, Addition and Subtraction) ko istemal karke mathematical operations perform kiye ja sakte hain. Yeh operations ko variable ka istemal karke tafseel se samjhaate hain, yahan ek example hai:

```javascript
// Variables declare karein
var x = 10;
var y = 5;
var z = 2;

// Bodmas ke mutabiq mathematical operations perform karein
var result = (x + y) * z / 2; // (10 + 5) * 2 / 2 = 15

// Result ko print karein
console.log("Result: " + result);
```

Iss example mein:

- Pehle `x`, `y`, aur `z` variables ko declare kiya gaya hai jo ki numerical values ko represent karte hain.
- Phir `result` variable mein `(x + y) * z / 2` expression ko assign kiya gaya hai. Yeh expression BODMAS ke rules ke mutabiq solve hoga: sabse pehle brackets, phir orders (exponents), phir division aur multiplication, aur phir addition aur subtraction.
- Iss expression mein pehle brackets ke andar `x + y` ka addition hua hai, phir `z` se multiply kiya gaya hai, aur phir 2 se divide kiya gaya hai.
- Ant mein `result` variable ko print kiya gaya hai jiska result 15 hoga.

Is tarah se aap JavaScript mein BODMAS ke rules ke mutabiq mathematical operations perform kar sakte hain.

Bilkul, main tafseel se samjhaata hoon:

BODMAS (Brackets, Orders, Division and Multiplication, Addition and Subtraction) ek rule hai jo mathematical expressions ko solve karne ke liye istemal hota hai. Yeh rule ensure karta hai ki expressions ko sahi order mein solve kiya jaaye.

1. Brackets (Parentheses): Sabse pehle brackets ke andar ke expressions ko solve karna hota hai. Agar ek expression ke andar aur bhi brackets hain toh unko andar se bahar ke brackets ke andar se solve karna hota hai.

2. Orders (Exponents): Orders ke hisaab se exponents ko solve karna hota hai. Exponents hote hain jab ek number ko doosre number se power mein raise kiya jaata hai. For example, 2^3 mein 2 ko 3 power mein raise kiya gaya hai.

3. Division and Multiplication: Division aur Multiplication ko left se right ki taraf solve karna hota hai. Matlab, jo operation pehle aata hai woh pehle solve kiya jata hai. Agar kisi expression mein division aur multiplication dono hain toh pehle woh solve hoga jo pehle aata hai.

4. Addition and Subtraction: Addition aur Subtraction ko bhi left se right ki taraf solve karna hota hai. Agar ek expression mein addition aur subtraction dono hain toh pehle woh solve hoga jo pehle aata hai.

Yeh rules ek saath apply karke mathematical expression ko solve kiya jaata hai. Yahan ek example hai:

```
Expression: (4 + 5) * 3 / 2 - 1

Step 1: (Brackets) (4 + 5) = 9
Step 2: (Orders) No exponents
Step 3: (Division and Multiplication) 9 * 3 = 27
Step 4: (Division and Multiplication) 27 / 2 = 13.5
Step 5: (Addition and Subtraction) 13.5 - 1 = 12.5

Final Result: 12.5
```

Is example mein, sabse pehle brackets ke andar ka expression solve kiya gaya, phir multiplication aur division solve ki gayi, aur ant mein addition aur subtraction. Is tarah se BODMAS ke rules ke mutabiq expressions ko solve kiya jata hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein `typeof` operator ka upyog kisi bhi data type ki prakar ko jaanne ke liye hota hai. Ye operator ek operand ke data type ko return karta hai. Yeh ek unary operator hai, yaani ismein ek hi operand hota hai. Yeh operand jo bhi ho, uska data type return karta hai.

Yahan kuch examples hain jinmein `typeof` operator ka upyog kiya gaya hai:

1. Primitive Data Types:
   ```javascript
   console.log(typeof 42);  // Output: "number"
   console.log(typeof "Hello");  // Output: "string"
   console.log(typeof true);  // Output: "boolean"
   console.log(typeof undefined);  // Output: "undefined"
   console.log(typeof null);  // Output: "object" (JavaScript ka ek prakar ka bug hai)
   ```

2. Objects:
   ```javascript
   console.log(typeof {});  // Output: "object"
   console.log(typeof []);  // Output: "object"
   console.log(typeof new Date());  // Output: "object"
   ```

3. Functions:
   ```javascript
   console.log(typeof function(){});  // Output: "function"
   ```

4. Non-Primitive Data Types:
   ```javascript
   console.log(typeof NaN);  // Output: "number" (NaN bhi ek number hai, 'Not a Number' ka matlab hai)
   ```

5. Symbols (ECMAScript 6 and above):
   ```javascript
   console.log(typeof Symbol("foo"));  // Output: "symbol"
   ```

`typeof` operator ka upyog hota hai variables ke data type ko jaanne mein, especially jab code dynamic ho aur aapko run-time mein variable ke type ke baare mein jaanna ho. Ye debugging mein bhi kaam aata hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

"Prompt" JavaScript ka ek method hai jo user se input lekar deta hai. Iska syntax kuch aisa hota hai:

```javascript
var result = prompt("Message");
```

Yahan, `"Message"` ek string hai jo user ko dikhai degi jab prompt khulega. Ye basically ek prompt hota hai jisme user ko kuch input karne ki liye kaha jata hai. User jo bhi input karega woh string mein hota hai.

Agar user kuch nahi daalta to ye ek null value return karega.

Jaise agar hum ise use karte hain:

```javascript
var name = prompt("Enter your name");
alert("Hello " + name);
```

To agar user kuch input karta hai, toh output "Hello" ke sath uska naam aayega. Agar woh kuch nahi input karta to output bas "Hello" aayega.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------


jaroor. javascript mein "if" statement ek conditional statement hai, jiska istemal code ke ek block ko execute karne ke liye kiya jata hai agar koi condition sach ho. condition ek expression hai, jo true ya false ka man lauta sakta hai.

agar condition true hai, to if statement ke body mein maujud code execute kiya jata hai. agar condition false hai, to if statement ke body mein maujud code skip kar diya jata hai.

udaharan ke liye, niche diye gaye code mein, agar age variable ka man 18 ya usse zyada hai, to "You are an adult." wala message print kiya jayega. agar age variable ka man 18 se kam hai, to message print nahin kiya jayega.

JavaScript
var age = 17;

if (age >= 18) {
  console.log("You are an adult.");
}
Use code with caution.
if statement ka istemal code ke ek block ko execute karne ke liye kiya ja sakta hai, agar koi condition sach ho. agar condition false hai, to code ka vah block skip kar diya jata hai.

udaharan ke liye, niche diye gaye code mein, agar isLoggedIn variable ka man true hai, to "You are logged in." wala message print kiya jayega. agar isLoggedIn variable ka man false hai, to message print nahin kiya jayega.

JavaScript
var isLoggedIn = true;

if (isLoggedIn) {
  console.log("You are logged in.");
}
Use code with caution.
if statement ka istemal code ke ek block ko execute karne ke liye bhi kiya ja sakta hai, agar koi condition sach ho. agar condition false hai, to code ka vah block skip kar diya jata hai.

udaharan ke liye, niche diye gaye code mein, agar isLoggedIn variable ka man true hai, to "You are logged in." wala message print kiya jayega. agar isLoggedIn variable ka man false hai, to "You are not logged in." wala message print kiya jayega.

JavaScript
var isLoggedIn = false;

if (isLoggedIn) {
  console.log("You are logged in.");
} else {
  console.log("You are not logged in.");
}
Use code with caution.
mujhe ummid hai ki isase madad milegi! agar aapke pass koi aur sawal hai to mujhe bataen.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein, `==` (double equals) operator aik non-strict equality operator hai jo data type ko check nahi karta. Example:
```javascript
console.log(5 == '5'); // true
console.log(5 == 'five'); // false
```

Jab ke, `===` (triple equals) operator strict equality operator hai, jo data types ke sath sath value ko bhi compare karta hai. Example:
```javascript
console.log(5 === '5'); // false
console.log(5 === 5); // true
console.log('five' === '5'); // false
```

In short, `==` and `===` ke comparison mein `===` strict hai jabke `==` non-strict equality hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Zarurat padne par kisi statement ko code block mein execute karna ke liye `if` aur `else` statement ka istemal hota hai.

```javascript
// Example 1
var number = 10;
if (number > 5) {
  console.log("Number is greater than 5.");
} else {
  console.log("Number is less than or equal to 5.");
}
// Output: Number is greater than 5.
```

Jab `number` ki value 10 hoti hai, `if` statement true hota hai. To uska block run hota hai, jismein `"Number is greater than 5."` print hota hai. Agar number ki value 5 ya usse kam hoti, to `else` ka block run hota.

```javascript
// Example 2
var isRaining = false;
if (isRaining) {
  console.log("Take an umbrella.");
} else {
  console.log("It's not raining, enjoy your day.");
}
// Output: It's not raining, enjoy your day.
```

Jab `isRaining` ki value `false` hoti hai, to `if` ka block run nahi hota aur `else` ka block run hota hai.

```javascript
// Example 3
var marks = 70;
if (marks > 90) {
  console.log("Grade A+");
} else if (marks > 80) {
  console.log("Grade A");
} else if (marks > 70) {
  console.log("Grade B");
} else {
  console.log("Grade C");
}
// Output: Grade B
```

Yaha, `else if` statement ka istemal kiya gaya hai jisse hum grades ko behtar tarah se categorize kar sakte hain. `marks` ki value 70 hoti hai, to pehle `if` statement false hota hai. Fir `else if (marks > 80)` ka statement false hota hai, kyunki `marks` ki value 70 hai, jo 80 se choti hai. Lekin, `else if (marks > 70)` ka statement true hota hai, to uska block run hota hai, jismein `"Grade B"` print hota hai. Agar `marks` ki value 70 se kam hoti, to `else` ka block run hota.

To `if` aur `else` statement ka istemal program ko control karna ke liye kiya jata hai. Agar `if` ka statement true hota hai, to uska block run hota hai. Aur agar `if` ka statement false hota hai, to `else` ka block run hota hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein, comparison operators se values ya variables ke darmiyan moqifaati muqable kaari (conditional) expressions banai ja sakti hain. Yeh operators aam tor par conditional statements, loops aur expressions mein istemal hote hain.

**1. Equal to (`==`)**: Dono cheezon ke values ko muqable ke liye, `==` operator istemal kiya jaata hai. Yeh operator value ke saath type ki comparison nahi karta. Agar values equal hongi to true, warna false return hoga.
  ```javascript
  var a = 5;
  var b = "5";
  console.log(a == b); // true
  ```
  
**2. Not equal to (`!=`)**: `!=` operator, do values ke beech not equal hone ke liye use hota hai. Agar values equal nahi hongi to true, warna false return hoga.
  ```javascript
  var a = 5;
  var b = 10;
  console.log(a != b); // true
  ```
  
**3. Greater than (`>`)**: `>` operator, ek value ko dusre se bada hone ke liye use hota hai.
  ```javascript
  var a = 15;
  var b = 10;
  console.log(a > b); // true
  ```
  
**4. Greater than or equal to (`>=`)**: `>=` operator, ek value ko dusre se bada ya barabar hone ke liye use hota hai.
  ```javascript
  var a = 15;
  var b = 10;
  console.log(a >= b); // true
  ```
  
**5. Less than (`<`)**: `<` operator, ek value ko dusre se chota hone ke liye use hota hai.
  ```javascript
  var a = 15;
  var b = 10;
  console.log(a < b); // false
  ```
  
**6. Less than or equal to (`<=`)**: `<=` operator, ek value ko dusre se chota ya barabar hone ke liye use hota hai.
  ```javascript
  var a = 15;
  var b = 20;
  console.log(a <= b); // true
  ```

**7. Strict Equal to (`===`)**: `===` operator, values ke saath type bhi compare karta hai aur agar dono values same type ke hain aur equal hain to true return karta hai.
  ```javascript
  var a = 5;
  var b = "5";
  console.log(a === b); // false
  ```
  
**8. Strict Not Equal to (`!==`)**: `!==` operator, values ke saath type bhi compare karta hai aur agar dono values same type ke hain lekin equal nahi hain to true return karta hai.
  ```javascript
  var a = 5;
  var b = "5";
  console.log(a !== b); // true
  ```

In comparison operators, booleans `true` aur `false` hotay hain. `true` ko 1 aur `false` ko 0 ke barabar consider kiya jata hai. Agar aik operand string hai aur doosra number, ya aik operand number hai aur doosra string, to JavaScript automatically strings ko numbers mein convert karta hai aur comparison karta hai. Agar operands mein se koi bhi value NaN (Not a Number) ho, to kisi bhi operator ke liye result false hota hai.

Ye thi comparison operators ki tafseel. Isay kisi bhi conditional statement, loop ya expressions ke sath istemal kiya ja sakta hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein, ek Array ek tarah ka data structure hai jo kai values ko ek saath store karne ki anumati deta hai. Yeh values kisi bhi data type ki ho sakti hain jaise numbers, strings, objects, ya phir even other Arrays. Har value ko ek unique index assign kiya jata hai, jisse aap unhein access kar sakte hain.

Yahan ek simple example hai:

```javascript
// Ek Array banate hain jo numbers ko store karta hai
var numbers = [1, 2, 3, 4, 5];

// Ek Array banate hain jo strings ko store karta hai
var fruits = ['Apple', 'Banana', 'Orange'];

// Ek Array banate hain jo mixed data types ko store karta hai
var AixedArray = [1, 'hello', true, { name: 'John' }];

// Array ki values ko access karna
console.log(numbers[0]); // Output: 1
console.log(fruits[1]);  // Output: Banana
console.log(AixedArray[2]); // Output: true

// Array ke length ko janana
console.log(numbers.length); // Output: 5
console.log(fruits.length);  // Output: 3
console.log(AixedArray.length); // Output: 4
```

Is example mein, `numbers`, `fruits`, aur `AixedArray` Arrays hain. Har ek Array mein alag tarah ki values hain. Aap `[]` brackets ka istemal karke ek Array declare kar sakte hain, aur `length` property ka istemal karke Array ke length ko jan sakte hain. Array ke values ko index ki madad se access kiya ja sakta hai, jahan pe index 0 se start hota hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein Arrays bahut ahem hote hain kyunki ye data ko organize karne aur manage karne ke liye ek mukhya tareeqa hain. Array ek collection hoti hai jo multiple values ko store karne ki capacity rakhti hai. Yahan tak ki ek hi Array mein strings, numbers, objects, functions, aur even other Arrays bhi ho sakti hain.

Yahan kuch mukhya Array methods hain:

1. **push()**: Ye method Array ke end mein ek ya zyada elements ko add karta hai.
Or Ye Array Ki length ko return krta he

```javascript
var fruits = ["apple", "banana"];
fruits.push("orange");
// Ab fruits mein ["apple", "banana", "orange"] hoga.
```

2. **pop()**: Ye method Array ke end se ek element ko hata deta hai aur use jo value hat Ti he use return karta hai.

```javascript
var fruits = ["apple", "banana", "orange"];
var lastFruit = fruits.pop();
// Ab lastFruit mein "orange" hoga aur fruits mein ["apple", "banana"] hoga.
```

3. **shift()**: Ye method Array ke shuruaati element ko hata deta hai aur  jo value hat Ti he use return karta hai

```javascript
var fruits = ["apple", "banana", "orange"];
var firstFruit = fruits.shift();
// Ab firstFruit mein "apple" hoga aur fruits mein ["banana", "orange"] hoga.
```

4. **unshift()**: Ye method Array ke shuruaat mein ek ya zyada elements ko add karta hai.
Or Ye Array Ki length ko return krta he

```javascript
var fruits = ["banana", "orange"];
fruits.unshift("apple");
// Ab fruits mein ["apple", "banana", "orange"] hoga.
```
```

Slice Method:
slice() method Array se ek naya Array banata hai, jo original Array ke selected elements ko include karta hai. Yeh method do parameters leta hai: start index aur end index (jo optional hai). Yadi end index provide nahi kiya gaya hai, to slice() method start index se lekar Array ke end tak ke elements ko select karta hai.

Ye Apna Output Eik Naye Array me Deta he. mtlb .slice ko call krte waqt apke use eik naye array me put krna hoga.
return me apna output return krta h

var fruits = ['Apple', 'Banana', 'Orange', 'Mango', 'Grapes'];

var selectedFruits = fruits.slice(1, 3);
console.log(selectedFruits); // Output: ['Banana', 'Orange']
Is example mein, slice(1, 3) method 'fruits' Array se 'Banana' aur 'Orange' ko select karta hai, jinhein 'selectedFruits' Array mein store kiya jata hai.

Splice Method:
splice() method Array ko modify karta hai, elements ko remove ya add karke. Yeh method teen parameters leta hai: start index (jahan se modification shuru karni hai), delete count (kitne elements remove karne hain), aur optional parameters jaise hi new elements (jo Array mein add kiya jayega).

Ye Return Me deleted value return krta he.

var fruits = ['Apple', 'Banana', 'Orange', 'Mango', 'Grapes'];

// 'Banana' aur 'Orange' ko remove karna
fruits.splice(1, 2);
console.log(fruits); // Output: ['Apple', 'Mango', 'Grapes']

// 'Strawberry' aur 'Pineapple' ko add karna 'Mango' ke baad
fruits.splice(2, 0, 'Strawberry', 'Pineapple');
console.log(fruits); // Output: ['Apple', 'Mango', 'Strawberry', 'Pineapple', 'Grapes']
Is example mein, splice(1, 2) method 'fruits' Array se 'Banana' aur 'Orange' ko remove karta hai. Aur phir splice(2, 0, 'Strawberry', 'Pineapple') method 'Mango' ke baad 'Strawberry' aur 'Pineapple' ko add karta hai.us mein ["orange", "grape"] hoga.

Ye sirf kuch basic methods hain. JavaScript mein aur bhi bahut se Array methods hain jo advanced functionality provide karte hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein do pramukh data types hote hain: primitive aur non-primitive (yaadat ke types). Yahaan dono ke beech ka farq samjhaata hoon:

1. **Primitive Types:**
   - **Number:** Numeric values ko represent karta hai, jo ki integers aur floating-point numbers ho sakte hain.
   - **String:** Character sequences ko represent karta hai, jo single ya double quotes mein hote hain.
   - **Boolean:** Logical value ko represent karta hai, jo true ya false ho sakta hai.
   - **Undefined:** Initialize nahi kiya gaya variable ya object property ko represent karta hai jo exist nahi karta.
   - **Null:** Kisi bhi object value ki chetavani ki ichha ko darshata hai.
   - **Symbol:** Ek vishesh pahchanakarta ko darshata hai jo object property ke roop mein istemal hota hai (ECMAScript 6 mein joda gaya hai).

2. **Non-Primitive Types (Reference Types):**
   - **Object:** Ek key-value pairs ki collection ko darshata hai. Objects adhik complex data structures hote hain aur dusre data types, including other objects, arrays, aur functions ko hold kar sakte hain.
   - **Array:** Data ke kramashah viniyamit sangrah ko darshata hai.
   - **Function:** Ek call karne yogy object ko darshata hai jo invoke kiya ja sakta hai.
   - **Date:** Ek tarikh aur samay ko darshata hai.
   - **RegExp:** Text patterns ko match karne ke liye ek regular expression object ko darshata hai.
   - **Error:** Run time errors ko pakadne wala ek error object ko darshata hai.
   - **Map, Set, WeakMap, WeakSet:** Ye ECMAScript 6 mein prastut kiye gaye vishesh data structures hain jo nishchit guno aur vyavaharon ke saath data sangrahon ko sambhalne ke liye upayog hota hai.

Primitive types immutable hote hain, yani unki values ko nahi badla ja sakta. Non-primitive types mutable hote hain, yani unki values ko badla ja sakta hai. Iske alawa, JavaScript mein non-primitive types by reference pass kiye jate hain, jabki primitive types by value pass kiye jate hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein, ek array ki shallow copy aur deep copy mein farq hai:

1. **Shallow Copy:**
   Shallow copy ek naya array banaata hai jo keval mool array ke references ko rakhta hai, lekin mool array ke elements ko ek naya copy nahi banata. Iska matlab hai ki agar mool array ke kisi element ka reference doosre array mein badla jaata hai, to dono arrays mein uss element ka reference ek hi hoga.
   
   Example of shallow copy:
   ```javascript
   var originalArray = [1, 2, 3];
   var shallowCopy = originalArray.slice();

   shallowCopy[0] = 4;
   console.log(originalArray); // Output: [1, 2, 3]
   console.log(shallowCopy);   // Output: [4, 2, 3]
   ```

2. **Deep Copy:**
   Deep copy ek naya array banaata hai jo mool array ke har ek element ka ek naya copy banata hai. Iska matlab hai ki agar mool array ke kisi element ka reference doosre array mein badla jaata hai, to yeh change doosre array ko prabhaavit nahi karega, kyunki dono arrays ke elements alag-alag copies hain.
   
   Example of deep copy:
   ```javascript
   var originalArray = [1, 2, [3, 4]];
   var deepCopy = JSON.parse(JSON.stringify(originalArray));

   deepCopy[2][0] = 5;
   console.log(originalArray); // Output: [1, 2, [3, 4]]
   console.log(deepCopy);      // Output: [1, 2, [5, 4]]
   ```

Is tarah, shallow copy sirf mool array ke references ko copy karta hai jabki deep copy mool array ke har ek element ka naya copy banata hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
