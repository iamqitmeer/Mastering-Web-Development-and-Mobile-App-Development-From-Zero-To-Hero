Programming ek tarika hai jisse hum computer ko instructions dena seekhte hain. Ye instructions humare likhe gaye special codes hote hain jo computer ko samajhne me madad karte hain. Programming ke zariye hum computer programs, applications, websites, games, aur aur bhi bahut kuch develop kar sakte hain. Ye ek creative aur powerful tool hai jo technology ko shape dene me madad karta hai. Programming me alag-alag programming languages ka istemal hota hai jaise ki Python, Java, C++, JavaScript, etc.

Lekin Computer to Programming Samajhta nhi he

Haan, aap bilkul sahi hain. Computer keval binary language (0s aur 1s) ko samajh sakta hai, jo ki machine language ke roop mein jaana jaata hai. Lekin hum insani zubaan mein likhe gaye code ko compile ya interpret karke machine language mein badal dete hain, taaki computer usse samajh sake.

Programming languages ko hum insani zubaan mein likhte hain taaki hum computer ko instructions de sakein. Ye languages humare liye zyada samajhne mein asaan hote hain. Jab hum code likhte hain, hum instructions ko syntax ke roop mein likhte hain jo computer ke rules aur structure ko follow karte hain.

Is tarah se, programming ek tarika hai jisse hum computer ko samajhane ke liye insani zubaan mein instructions dete hain. Computer phir un instructions ko machine language mein badal kar samajhta hai aur unhe execute karta hai.

Ab Jo Translate krta he wo 2 tareeqe hote he compile krne ke.

Compiler aur interpreter dono hi programming languages ke code ko machine language mein translate karne ke liye istemal hota hai, lekin dono kaam karne ka tarika alag hai.

1. compiler

Compiler ek aise program hai jo poora source code ko ek baar mein translate karta hai. Source code compile hota hai aur uska machine language version, ya object code, generate hota hai. Is object code ko execute kiya ja sakta hai baar-baar bina source code ke. Compiler ek complete executable file generate karta hai, jo alag se execute kiya ja sakta hai.

2. interpret

Interpreter bhi source code ko machine language mein translate karta hai, lekin wo ise line-by-line execute karta hai. Interpreter source code ko ek line ko parhta hai, usse translate karta hai aur phir use execute karta hai. Phir agle line ko padhta hai aur usi tarah se continue karta hai. Interpreter source code ko execute karte waqt hota hai, isliye har baar code ko run karne ke liye interpreter ki zarurat hoti hai.

Toh, ek compiler poora source code ko ek baar mein translate karta hai aur ek executable file generate karta hai, jabki ek interpreter source code ko line-by-line translate aur execute karta hai.

--------------------------------------------------------------------

High Level Programming language VS Low Level Programming language

High Level Programming language

High level languages insani zubaan jaise English ki tarah hoti hain, jinhe aasani se samjha aur likha ja sakta hai.
Ye languages abstractions aur built-in functions ka istemal karte hain jo programming tasks ko asaan banate hain.
Developers ko hardware ki details ya internal workings ki fiqr nahi karni parti hai.
Examples: Python, Java, JavaScript, C#, etc.

Low Level Programming language

Low level languages hardware aur computer architecture ke niji tareeqo se zyada qareeb hoti hain.
In languages mein programming instructions aur data ko seedha hardware level par manipulate karne ki suvidha hoti hai.
Ye languages zyada samajhne mein mushkil hote hain aur development process ko complex bana dete hain.
Examples: Assembly language, Machine language.

JavaScript ek high level programming language hai. Iska matlab hai ki ye language insani zubaan jaise hai aur developers ise aasani se samajh aur likh sakte hain. JavaScript ko web development ke liye khas tor par istemal kiya jata hai, jaise ki web applications, interactive websites, aur browser extensions banane ke liye. JavaScript ka use client-side scripting aur server-side scripting mein bhi hota hai. Ye language modern web development ka ek important component hai.

--------------------------------------------------------------------

EcmaScript (ECMAScript) ek standard hai jo JavaScript programming language ke liye define ki gayi hai. Jab se JavaScript banaya gaya, tab se isme regular updates aur improvements hote rahe hain. In updates aur improvements ko standardize karne ke liye, Ecma International ne EkmaScript ko define kiya.

ECMAScript, JavaScript ki ek specific implementation ka standard hai. Ye standard specify karta hai ki JavaScript language mein kya features aur capabilities hone chahiye. Isse developers ko ek consistent platform milta hai jisme wo code likh sakte hain.

Har new version ya update ke saath, ECMAScript specification mein naye features aur improvements shamil kiye jate hain jo developers ke liye behtar functionality aur flexibility provide karte hain. Bahut se modern web browsers, jaise ki Google Chrome, Mozilla Firefox, aur Safari, ECMAScript ke latest versions ko support karte hain, jisse developers ko naye features ka istemal karne ki rasta milta hai.


--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

1st Chapter - Alert

JavaScript mein, `alert()` ek built-in function hai jo ek pop-up dialog box ko display karta hai jo user ko kuch message dikhata hai. Ye message typically ek string hota hai jo developer ne specify kiya hota hai. `alert()` function ka basic istemal user ko kisi information ya notification ke bare mein suchit karne ke liye hota hai.

Yeh ek simple tareeqa hai user ko kuch information provide karne ka. Jaise:

```javascript
alert("Welcome to our website!");
```

Is code se, agar koi user website ko visit karta hai to usse ek pop-up message milega jisme "Welcome to our website!" likha hoga. Uske baad jab user pop-up box ko close karega, wo website par navigate kar sakta hai.

ye javascript ka banaya gaya eik method he jise ham use krskte he.
Ab method ka matlab eil Example se samajhata hoo.
Ap ke Mom ne kaha ke motor chala ke ajaooo. lekin motor chalane ke liye motor set krni padti he phir uske taar ko board ke sath jora jataa he. phir jaake start krni padti he agar ham taar ko board ke sath jor dete he to ab hamara kaam chota saa reh gaya bas hame button toggled krna he motor ko chalane ya band krne ke liye. ab hamne toggled wala seen kiya ne ye eik method ban gaya or ham us ko use krte rehte he.

Rules Of method.
- method ke sath hamesha round bracket lagta he () agar iske saath round bracket () nhi lage to ham usko method nhi keh skte 

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Rule Of JavaScript
- Agar Ham ne Code Likha Or Code ka Output Show nhi horaha. to hame browser me inspect me jake console me check krenge
- saare errors browser me inspect me jake console me nazar ate he
- Agar Ham ne Boolean, Number, Null, undefined ya koi bhi datatype ko string me likh de to koi bhi error nhi ayega blki wo jo aapne likh tha uska datatype string banega. lekin agar ham string ko string ke ilawa koi or datatype me likh de to error asakta he.
- development ke doraan console khol ke rakhe to behter he.
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript aur dusri programming languages ke darmiyan kuch mukhya farq hote hain:

1. Client-side aur Server-side Execution:
   - JavaScript ek client-side scripting language hai, matlab ye web browsers mein execute hota hai.
   - Dusri taraf, server-side languages jaise PHP, Python, aur Ruby server par execute hote hain.

2. Type of Language:
   - JavaScript ek interpreted language hai, matlab iska code line-by-line execute hota hai.
   - Kuch dusri languages jaise Java, C++, aur C# compiled languages hain, jinke code ko pehle compile kiya jata hai aur phir execute kiya jata hai.

3. Syntax aur Structure:
   - JavaScript ka syntax aur structure alag hota hai dusri languages jaise C++, Java, Python, etc.
   - Isme specific syntax rules aur conventions hote hain jo dusri languages se alag hote hain.

4. Concurrency Handling:
   - JavaScript single-threaded language hai, matlab ek samay par sirf ek hi task execute hota hai.
   - Kuch languages concurrent programming aur multithreading ko support karte hain, jisse ek samay par multiple tasks ko handle kiya ja sakta hai.

5. Standard Libraries aur Frameworks:
   - JavaScript ke liye alag-alag standard libraries aur frameworks hote hain jaise ki React, Angular, aur Node.js.
   - Dusri languages ke liye bhi apne standard libraries aur frameworks hote hain jo unke specific use cases ko address karte hain.

6. Execution Environment:
   - JavaScript web browsers aur server environments jaise Node.js ke through execute hota hai.
   - Dusri languages apne specific runtime environments mein execute hote hain, jaise ki Java Virtual Machine (JVM) Java ke liye.

Ye kuch mukhya farq hain JavaScript aur dusri programming languages ke darmiyan. Har language ke apne use cases aur strengths hote hain, jisse developers apne project requirements ke according choose karte hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Console kya hota he aur as a developer ham kyu istemal krte he?

"Console" ek development environment ka hissa hota hai jo developers ko code likhte waqt debugging aur testing ke liye madad karta hai. Iska basic purpose hota hai developers ko real-time feedback provide karna unke code ke execution ke doraan.

Web development context mein, "console" usually web browser ke developer tools ka ek part hota hai. Developers isme JavaScript code likh sakte hain aur fir use execute karke errors ko identify aur debug kar sakte hain. Ye console aam tor par ek command line interface ki tarah kaam karta hai jahaan se developers apne JavaScript code ko run kar sakte hain.

Developers console ka istemal karte hain kyun ki:

1. Debugging: Developers console ko use karte hain errors aur bugs ko identify karne aur fix karne ke liye. Ye unhe real-time feedback deta hai unke code ke execution ke doraan.

2. Testing: Console ko use karke developers apne code ko test kar sakte hain. Wo apne functions aur variables ko test kar sakte hain aur unke output ko dekh sakte hain.

3. Logging Information: Developers apne code ke different parts ko console par log karte hain taki wo code ka flow track kar sakein aur kisi issue ko diagnose kar sakein.

4. Performance Analysis: Console ki madad se developers apne code ki performance analyze kar sakte hain, jaise ki execution time aur memory usage.

5. API Exploration: Console ki madad se developers web browser ke APIs ko explore kar sakte hain aur unka istemal karke dynamic web applications develop kar sakte hain.

Overall, console ek powerful tool hai jo developers ko code likhte waqt real-time feedback provide karta hai aur unhe debugging aur testing mein madad karta hai.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

method likhte waqt kuch mistakes or achi practices

Jab aap method likh rahe hain, kuch mistakes se bachne aur behtar practices ka dhyan rakhna jaruri hai. Niche kuch common mistakes aur achi practices di gayi hain:

Mistakes:

1. Poor Naming Convention:
   - Method ka naam clear aur descriptive hona chahiye.
   - Avoid single letter names ya ambiguous names ka istemal.

2. Overloading:
   - Method overloading (ek method ka multiple definitions dena) JavaScript mein nahi hota hai.
   - Ek hi naam ke do alag-alag functions define karne ki koshish na karein.

3. Overuse of Side Effects:
   - Methods ko likhte waqt side effects ko minimize karein.
   - Side effects se matlab hai ki function ke execution se kisi state ya variable mein unexpected changes ho jaayein.

4. Ignoring Error Handling:
   - Error handling ko ignore na karein. Methods ko robust banane ke liye error handling ka hona jaruri hai.
   - try-catch blocks ka istemal karein jahaan exception ki sambhavna ho.

Achi Practices:

1. Clear Purpose:
   - Har method ka ek clear purpose hona chahiye.
   - Method ka naam uske functionality ko describe karna chahiye.

2. Single Responsibility Principle (SRP):
   - Ek method ko ek specific task ya responsibility assign karein.
   - Methods ko modular banayein taki unka reuse aur maintenance aasan ho.

3. Parameter Handling:
   - Sahi number aur type ke parameters ka istemal karein.
   - Default parameters ka istemal karke flexible methods likhein.

4. Return Statements:
   - Method ke andar sahi tarah se return statements ka istemal karein.
   - Har function ko ek return value dena chahiye, agar applicable ho.

5. Comments aur Documentation:
   - Code readability aur maintainability ke liye comments ka istemal karein.
   - Complex logic ya important concepts ko explain karne ke liye documentation ka istemal karein.

6. Testing:
   - Har method ko test karein multiple scenarios ke liye.
   - Unit tests likh kar method ke expected behavior ko verify karein.

In practices ko follow karke aap apne methods ko efficient, readable, aur maintainable bana sakte hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

example mene alert ka eik method call kiya. lekin kaffii log window.alert likh te he aisa krna kaisa

`alert()` ek global function hai JavaScript mein, isliye aap ise directly `alert()` likhkar bhi call kar sakte hain. Iska matlab hai ki `window.alert()` aur `alert()` dono kaam karenge, kyun ki JavaScript mein global functions ko direct access kar sakte hain.

Kuch log `window.alert()` ka istemal karte hain taki clarity maintain ho aur pata chale ki ye ek global function hai jo window object ke andar hai. Ye coding conventions ya coding standards ke tahat kiya jaata hai, lekin technically dono hi tareeqe sahi hain.

Jaise ki:

```javascript
// Dono sahi tarah se kaam karenge
alert("Hello, world!");
window.alert("Hello, world!");
```

Aapko jo bhi approach comfortable aur consistent lage, aap uska istemal kar sakte hain. Important hai ki aap apne code mein consistency maintain karein taaki dusre developers ko aasani se samajh aaye.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Variable in JavaScript

Variable ek programming concept hai jise real-world analogy se samjha ja sakta hai. Ek variable ek container ki tarah hota hai jisme aap data store kar sakte hain aur phir us data ko program ke doosre hisson mein use kar sakte hain.

Ek real-life example ke roop mein sochiye ki aap ek dukaan chalate hain aur aapke paas ek cash counter hai jisme aap paise rakhte hain. Is cash counter ko ek variable ke roop mein samajh sakte hain. Jab bhi koi customer aata hai aur kuch khareedta hai, aap uske paise is cash counter mein rakhte hain aur phir un paison ko dusre transactions mein istemal karte hain.

varieble banane ka eik or faida ye he ke koi bhi aisa data jo hamari file me baaar baaar use ho raha he to ham uske variable k andar insert krke phir use krLegene

Variable banane ka tareeqa.
- sab se pehle keyword ata he varieble ka jiska naam he "var"
- then varieble ka naam ata he naam koi bhi ho sakta he lekin iske bhi kuch rules hotw he jo batata hoo

Variable ke naam likhte waqt kuch usool ya rules hote hain jo aapko programming mein follow karne chahiye:

1. Descriptive Names: Variable ke naam ko aise chune jo uski purpose ko clearly represent kare. Isse code ko padhne wale aur aap khud ko bhi samajhne mein madad milti hai.

2. CamelCase: Variable ke naam mein multiple words ka use hota hai to CamelCase ka istemal karein jisme har new word ke first letter ko capital likha jata hai. For example: `totalAmount`, `customerName`, etc.

3. Meaningful Names: Variable ka naam aisa hona chahiye jo uski value ya data ko samajhne mein madad kare. Avoid single letter names jaise `x`, `y`, `z` unless unka specific meaning hai.

4. Avoid Keywords: Variable ke naam mein programming language ke reserved keywords ka istemal na karein jaise `var`, `if`, `else` etc.

5. Consistency: Variable ke naming conventions ko consistent rakhein taaki code ki readability improve ho.

6. Use English: Variable names ko English mein likhein taaki code ko padhne wale har koi unhe aasani se samajh sake.

7. Avoid Numbers at Start: Variable ke naam ke shuru mein number ka istemal na karein, kyunki kuch programming languages mein ye allow nahi hota.

8. Avoid Special Characters: Variable names mein special characters jaise `@`, `$`, `!` ka istemal na karein, kyunki ye confusion create kar sakte hain aur readability ko kam kar sakte hain.

Yeh kuch common guidelines hain jo variable naming ke liye follow ki jaati hain. Inka istemal karke aap apne code ko zyada readable aur maintainable bana sakte hain.

- then = ka sign
- phir uske andar variable ka data/value
- & Last inverted coma ';' - ye zroori bhi nhi he but best practice he ke lagao to acha he

ham varieble ko update bhi krskte he. means
var isClassContinued = true
ab edit krne ke liye.
- pehle varieble ka naam
- phir equalsTo ka sign ( = )
- Phit updateed value
- & Last inverted coma ';' - ye zroori bhi nhi he but best practice he ke lagao to acha he


Agar Hamne Varieble Banaya Lekin Uske Andar koi bhi valyue add nhi ki to javascript use undefined show krwata he.


--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

alert(fullName)
mene fullName name ka koi bhi variable nhi banaya or usko mene alert krwadiya lekin bina string ke sath. ab mjhe error mils "fullName is not defined". usme fullName ko pehle browser ne search kiya ke ayaa ke is naam se koi variable bana he lekin nhi bana hua tha is liye mere paas error agayaa.

Agar me varieble bana doonga to ab us ko varieble mil jaye ga or wo value show kr dega

Agar me variable neeche banata hoo or variable banane se pehle hi me fullName ko alert krdeta hoo. is topic ko kehte he hoisting Ajaaoo detail me parhte he

--------------------------------------------------------------------

Hoisting ek JavaScript ka concept hai jisme variables aur functions ki declaration unke scope ke shuru mein move ki jaati hai. Lekin, assignment (ya initialization) statement wahi pe rehta hai jahan aapne likha hai.

Iska simple matlab hai ki JavaScript interpreter code ko padhte waqt sabhi variable aur function declarations ko us block ke shuru mein move kar deta hai, lekin unki assignment ko wahi pe rehne deta hai jahan aapne kiya hai.

example 

var myName = "Qitmeer" // JavaScript is varieble ko wahi top pe leke chala jata he. lekin iski value ko wahi pe rehne deta he means ke
var myName; // top pe leke chala jae ga
myName = "Qitmeer"; // wahi pe Rehegea

Chaliye ek simple example se samjhe:

```javascript
alert(x); // Output: undefined
var x = 5;
alert(x); // Output: 5
```

Yahan `alert(x)` pehle hi run hota hai, lekin `x` ka value `5` nahi hai, balki `undefined` hai. Kyunki `var x = 5;` ki declaration `alert(x);` ke upar hoist ho gayi hai, lekin assignment wahi pe rehta hai jahan aapne likha hai.

Is tarah se hoisting ko samajhna asaan hai. Hoisting ke through JavaScript interpreter code ko organize karta hai taaki aapko errors se bachane mein madad mile aur aapka code sahi tarah se execute ho sake.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript case-sensitive hai, matlab ki wo capital letters aur small letters ko alag alag samajhta hai. Yani agar aap kisi variable, function, ya kisi aur identifier ka naam capital letters ya small letters mein likhte hain, to JavaScript unhe alag alag entities ke roop mein treat karega.

Jaise ki:

```javascript
var myVariable = 10;
var myvariable = 20;

console.log(myVariable); // Output: 10
console.log(myvariable); // Output: 20
```

Yahan, `myVariable` aur `myvariable` do alag alag variables hain, kyunki capitalization mein difference hai.

Isi tarah se function names, object properties, aur other identifiers bhi case-sensitive hote hain. Yadi aap kisi identifier ko ek jagah capital letter ke sath aur dusri jagah small letter ke sath use karte hain, to JavaScript unhe alag alag samajhega.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

JavaScript mein variable ke naam rakhne ke kuch rules hain, jinhe aapko follow karna chahiye:

1. Valid Characters: Variable names letters (A-Z, a-z), digits (0-9), underscore (_) aur dollar sign ($) ka combination ho sakta hai. Lekin, variable ka naam aise shuru nahi ho sakta jo number se start ho.

2. Case-Sensitivity: JavaScript case-sensitive hai, matlab ki uppercase aur lowercase letters alag alag consider hote hain. `myVariable`, `MyVariable`, aur `myvariable` teen alag alag variables hain.

3. Reserved Keywords: JavaScript mein kuch reserved keywords hote hain jaise `var`, `let`, `const`, `function` etc. In keywords ka istemal variable names ke roop mein nahi kiya ja sakta.

4. Meaningful Names: Variable names ko descriptive aur meaningful rakhein taaki dusre developers aasani se samajh sakein ki variable ka use kya hai. For example, `count` ka istemal count karne ke liye karein.

5. CamelCase Convention: Variable names mein CamelCase convention ka istemal kiya jata hai jisme har new word ke first letter ko capital likha jata hai, jaise `myVariableName`.

6. Avoid Numbers at Start: Variable name ke shuru mein number ka istemal na karein. Number se start hone wale names invalid hote hain.

7. Avoid Special Characters: Variable names mein special characters jaise `!`, `@`, `#`, `%`, etc. ka istemal na karein. Underscore (_) aur dollar sign ($) ka use kiya ja sakta hai lekin zyadatar developers prefer karte hain ke sirf underscore ka hi istemal kiya jaye.

8. Use English: JavaScript mein variable names ko English mein likha jata hai.

Yeh kuch common rules hain variable names ke liye jo JavaScript mein follow kiye jaate hain. In rules ka palan karke aap apne code ko zyada readable aur maintainable bana sakte hain.

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

CamelCase aur SnakeCase do alag-alag naming conventions hain jo programming languages mein variable names, function names, aur identifiers ke liye istemal kiye jaate hain. In dono conventions ka istemal code ko organized aur readable banane mein madad karta hai.

1. **CamelCase**:
   - CamelCase naming convention mein har new word ke pehle letter ko capital likha jaata hai, starting ke word ke first letter small hota hai.
   - Example: `myVariableName`, `calculateInterestRate`, `getUserDetails`.
   - JavaScript, Java, C#, Swift jaise languages mein CamelCase convention commonly istemal hota hai.
   - CamelCase ka istemal karne se code ki readability improve hoti hai aur identifiers ko clearly distinguish karne mein madad milti hai.

2. **SnakeCase**:
   - SnakeCase naming convention mein words ko underscore (_) se separate kiya jata hai aur sabhi letters small hoti hain.
   - Example: `my_variable_name`, `calculate_interest_rate`, `get_user_details`.
   - Python, Ruby jaise languages mein SnakeCase convention prefer kiya jata hai.
   - SnakeCase ka istemal bhi readability ko improve karta hai, especially agar variable name mein multiple words hain to unko clearly separate karne mein madad milti hai.

Importance:
- Sahi naming convention ka istemal code ko padhne wale aur maintain karne wale developers ke liye bahut mahatvapurna hai. Ye unhe code ko samajhne mein madad karta hai.
- CamelCase aur SnakeCase jaise conventions ka istemal karke aap apne code ko consistent aur organized rakh sakte hain, jisse dusre developers ko code samajhne mein asani hoti hai.
- Companies aur projects ke andar common naming conventions follow kiye jaate hain taaki codebase ek jaisa dikhe aur maintain karne mein asani ho.

Samanya roop se, CamelCase JavaScript jaise languages mein zyada popular hai, lekin kuch specific communities ya languages jaise Python mein SnakeCase zyada prefer kiya jata hai. Isme koi 'right' ya 'wrong' convention nahi hoti, balki consistency aur readability hi sabse mahatvapurna hoti hai.

















--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
